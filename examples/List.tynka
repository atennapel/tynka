def VTy = Ty Val
def (*) a b = intMul a b

def List A = tcon R. () (A R)
def Nil {A} : List A = con #0
def (::) {A} hd tl : List A = con #1 hd tl

def foldr {A : VTy} {vf} {B : Ty vf} (n : B) (c : A -> B -> B) (l : List A) : B =
  fix (go l. case l n (\hd tl. c hd (go tl))) l

def foldl {A B : VTy} (n : B) (c : B -> A -> B) (l : List A) : B =
  foldr (\acc. acc) (\hd go acc. go (c acc hd)) l n

def map {A B : VTy} (f : A -> B) (l : List A) : List B =
  foldr Nil (\hd tl. f hd :: tl) l

def (++) {A : VTy} (a b : List A) : List A = foldr b (::) a

def prod (l : List Int) : Int := foldl 1 (*) l
