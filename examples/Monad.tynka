def (+) a b = primIntAdd a b

def Reader (R : VTy) (A : Ty) = Val R -> A 
def return {R : VTy} {A : Ty} (x : A) : Reader R A = \_. x
def (>>=) {R : VTy} {A : Ty} {B : Ty}
  (f : Reader R A) (g : A -> Reader R B) : Reader R B =
  \r. g (f r) r
def ask {R : VTy} : Reader R R = \r. r
def runReader {R : VTy} {A : Ty } (f : Reader R A) (r : R) : A = f r

def foo (b : Bool) : Reader Int Int :=
  if b then
    return 10
  else
    ask >>= (\n. return (n + 10))

-----

def State (S A : VTy) = S -> (A ** S)
def returnS {S A : VTy} (x : A) : State S A = \s. (x, s)
def bindS {S A B : VTy} (f : State S A) (g : A -> State S B) : State S B =
  \s. let p := f s; g p.1 p.2
def get {S : VTy} : State S S = \s. (s, s)
def put {S : VTy} (s : S) : State S () = \_. ([], s)
def runState {S A : VTy} (s : S) (p : State S A) : A =
  let res := p s; res.1

def postInc : State Int Int =
  bindS get \x.
  bindS (put (x + 1)) \_.
  returnS x

def test := runState 42 postInc
