def (!) b = if b then False else True
def (&&) a b = if a then b else False
def (||) a b = if a then True else b

def (+) a b = primIntAdd a b
def (*) a b = primIntMul a b
def (-) a b = primIntSub a b
def (/) a b = primIntDiv a b
def (%) a b = primIntMod a b

def (==) a b = primIntEq a b
def (!=) a b = primIntNeq a b

def (<) a b = primIntLt a b
def (>) a b = primIntGt a b
def (<=) a b = primIntLeq a b
def (>=) a b = primIntGeq a b

def Nat = (A : Meta) -> A -> (A -> A) -> A
def Z : Nat = \A z s. z
def S (n : Nat) : Nat = \A z s. s (n A z s)

def foldNat {A} (n : Nat) (z : A) (s : A -> A) : A = n A z s

def pow (a : Nat) (b : Int) : Int = foldNat a 1 (\r. r * b)

def test := \n. pow (S (S (S Z))) n
