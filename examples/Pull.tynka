def List A = tcon R. () (A R)
def Nil {A} : List A = con #0
def (::) {A} hd tl : List A = con #1 hd tl

def VTy = Ty Val

def Step A S = (vf : VF) (R : VTy) -> R -> (A -> S -> R) -> R

def Pull A = (S : VTy) ** (step : S -> Step A S) ** (value : S) ** ()

def fromList {A : VTy} (as : List A) : Pull A =
  [List A, \as vf R stop yield. case as stop (\hd tl. yield hd tl), as]

def map {A B : VTy} (f : A -> B) (p : Pull A) : Pull B =
  [p.S, \as vf R stop yield. p.step as vf R stop (\a s. yield (f a) s), p.value]

def Push A = (vf: VF) (B : VTy) -> (A -> B -> B) -> B -> B

def toPush {A : VTy} (p : Pull A) : Push A =
  \vf B c n. fix (go s. p.step s vf B n (\a s. c a (go s))) p.value
