def VTy = Ty Val

data Unit := U

data Bool := False | True

data Pair A B := MkPair A B

data Nat := Z | S Nat

def isZero a = match a | Z. True | S _. False

def (+) a b :=
  fix (rec a. \acc. match a
  | Z. acc
  | S n. rec n (S acc)) a b

def (==) a b :=
  fix (rec a. \b. match a
  | Z. isZero b
  | S n. match b
    | Z. False
    | S m. rec n m
  ) a b

data List A
  | Nil
  | (::) A (List A)

def reverse {A : VTy} (l : List A) : List A =
  fix (go l. \acc. match l
  | Nil. acc
  | (::) hd tl. go tl (hd :: acc)
  ) l Nil

-- parser combinators
-- translated from https://tgdwyer.github.io/parsercombinators/
def Char = Nat
def String = List Char

data ParseError
  | UnexpectedEof
  | ExpectedEof String
  | UnexpectedChar Char
  | UnexpectedString String

data ParseResult A := Error ParseError | Result String A

def Parser (A : VTy) = String -> ParseResult A

def return {A : VTy} (a : A) : Parser A = \s. Result s a

def fail {A : VTy} (e : ParseError) : Parser A = \_. Error e

def ParseResult/map {A B : VTy} (f : A -> B) (p : ParseResult A) : ParseResult B =
  match p | Error e. Error e | Result s a. Result s (f a)

def (<$>) {A B : VTy} (f : A -> B) (p : Parser A) : Parser B =
  \s. ParseResult/map f (p s)

def (>>=) {A B : VTy} (p : Parser A) (f : A -> Parser B) : Parser B =
  \s. match p s | Error e. Error e | Result s a. f a s

def (>>) {A B : VTy} (p : Parser A) (k : Parser B) : Parser B =
  p >>= \_. k

def (<$$>) {A B C : VTy} (f : A -> B -> C) (p1 : Parser A) (p2 : Parser B) : Parser C =
  p1 >>= \a. p2 >>= \b. return (f a b)

def char : Parser Char =
  \s. match s | Nil. Error UnexpectedEof | (::) c s. Result s c

def satisfy (f : Char -> Bool) : Parser Char =
  char >>= \v.
    if f v then
      return v
    else
      fail (UnexpectedChar v)

def is (c : Char) : Parser Char = satisfy ((==) c)

def (<|>) {A : VTy} (p1 p2 : Parser A) : Parser A =
  \s. match p1 s
  | Error _. p2 s
  | Result s v. Result s v

def many {A : VTy} (p : Parser A) : Parser (List A) =
  reverse <$> \s. fix (go s. \acc.
    match p s
    | Error e. Result s acc
    | Result s' hd. go s' (hd :: acc)
    ) s Nil

def n0 = Z
def n1 = S n0
def n2 = n1 + n1
def n4 = n2 + n2
def n8 = n4 + n4
def n10 = n2 + n8
def n16 = n8 + n8
def n32 = n16 + n16
def n48 = n16 + n32
def n49 = S n48
def n50 = S n49
def n51 = S n50
def n52 = S n51
def n53 = S n52
def n54 = S n53
def n55 = S n54
def n56 = S n55
def n57 = S n56

def digit : Parser Char =
  is n48 <|> is n49 <|> is n50 <|> is n51 <|> is n52 <|> is n53 <|> is n54 <|> is n55 <|> is n56 <|> is n57

def spaces : Parser Unit = (\_. U) <$> many (is n32)

def number : Parser (List Char) = many digit

def input := #[n48, n49, n10]
def main := number input
