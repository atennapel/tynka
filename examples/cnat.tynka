def Nat = (A : Meta) -> A -> (A -> A) -> A
def Z : Nat = \A z s. z
def S (n : Nat) : Nat = \A z s. s (n A z s)
def foldNat {A} (n : Nat) (z : A) (s : A -> A) : A = n A z s

def NatS = (Nat : Meta) ** (Z : Nat) ** (S : Nat -> Nat) ** (fold : {A : Meta} -> Nat -> A -> (A -> A) -> A) ** ()
def CNatM : NatS = [Nat, Z, S, foldNat]

def addM (m : NatS) (a b : m.Nat) : m.Nat = m.fold a b m.S

def (+) = addM CNatM

def main = 1 + 2
