def UnitType = (A : Meta) -> A -> A
def Unit : UnitType = \A x. x

def (!) b = if b then False else True
def (&&) a b = if a then b else False
def (||) a b = if a then True else b

def (+) a b = primIntAdd a b
def (*) a b = primIntMul a b
def (-) a b = primIntSub a b
def (/) a b = primIntDiv a b
def (%) a b = primIntMod a b

def (==) a b = primIntEq a b
def (!=) a b = primIntNeq a b

def OptS =
  (n : ^Int) **
  (Option : VTy) **
  (none : Option) **
  (pure : Int -> Option) **
  (case : {R : VTy} -> Option -> R -> (Int -> R) -> R) **
  UnitType

def Opt (n : Int) : OptS = (n, Int, n, \i. i, \{R} o m j. if o == n then m else j o, Unit)

def bind (o : OptS) (x : o.Option) (k : Int -> o.Option) : o.Option =
  o.case x o.none k

def add (o : OptS) (a : o.Option) (b : o.Option) : o.Option =
  bind o a \x.
  bind o b \y.
  o.pure (x + y)

def n1 : Int := 0 - 1
def Opt0 : OptS = Opt n1

def main := add Opt0 (Opt0.pure 1) (Opt0.pure 2)
