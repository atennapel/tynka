def VTy = Ty Val

data Unit := MkUnit
data Bool := False | True

def Int = Foreign "I"
def Str = Foreign "Ljava/lang/String;"
def (>>=) = bindIO
def (>>) {A B : VTy} (a : IO A) (b : IO B) : IO B = a >>= \_. b
def (++) (a b : Str) : Str =
  foreign Str "invokeVirtual:java.lang.String.concat" a b
def (==) (x y : Str) : Bool =
  foreign Bool "invokeVirtual:java.lang.String.equals" x (foreign (Foreign "Ljava/lang/Object;") "cast" y)

def putLn {A : VTy} (x : A) : IO Unit =
  let out = foreign (Foreign "Ljava/io/PrintStream;") "getStatic:java.lang.System.out";
  foreignIO Unit "invokeVirtualVoid:java.io.PrintStream.println" out x

def getLn : IO Str =
  let in = foreign (Foreign "Ljava/io/InputStream;") "getStatic:java.lang.System.in";
  let scanner = foreign (Foreign "Ljava/util/Scanner;") "instantiate" in;
  foreignIO Str "invokeVirtual:java.util.Scanner.nextLine" scanner

def loopIO {A : VTy} (action : IO A -> IO A) : IO A =
  fix (go _. action (go MkUnit)) MkUnit

def main : IO Unit :=
  loopIO \loop.
    getLn >>= \name.
    if name == "exit" then
      returnIO MkUnit
    else
      putLn ("hi " ++ name) >> loop
