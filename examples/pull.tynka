def VTy = Ty Val

-- lists
data List A
  | Nil
  | (::) A (List A)

-- push lists
def Push A = (cv : CV) (B : Ty cv) -> (A -> B -> B) -> B -> B

-- pull lists
def Step A S = (cv : CV) (R : Ty cv) -> R -> (A -> S -> R) -> R

def Pull A = (S : VTy) ** (step : S -> Step A S) ** (value : S) ** ()

def Pull/fromList {A : VTy} (as : List A) : Pull A =
  [
    List A,
    \as cv R stop yield.
      match as
      | Nil. stop
      | (::) hd tl. yield hd tl,
    as
  ]

def Pull/map {A B : VTy} (f : A -> B) (p : Pull A) : Pull B =
  [
    p.S,
    \as cv R stop yield. p.step as cv R stop (\a s. yield (f a) s),
    p.value
  ]

def Pull/toPush {A : VTy} (p : Pull A) : Push A =
  \cv B c n. fix (go s. p.step s cv B n (\a s. c a (go s))) p.value
