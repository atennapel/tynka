def Unit = (A : Meta) -> A -> A
def unit : Unit = \A x. x

def Val = Ty V

def Step A S = (vf : VF) (R : Val) -> R -> (A -> S -> R) -> R

def Pull A = (S : Val) ** (step : S -> Step A S) ** (value : S) ** Unit

def fromList {A : Val} (as : List A) : Pull A =
  (List A, \as vf R stop yield. caseList as stop (\hd tl. yield hd tl), as, unit)

def map {A B : Val} (f : A -> B) (p : Pull A) : Pull B =
  (p.S, \as vf R stop yield. p.step as vf R stop (\a s. yield (f a) s), p.value, unit)

def Push A = (vf: VF) (B : Val) -> (A -> B -> B) -> B -> B

def toPush {A : Val} (p : Pull A) : Push A =
  \vf B c n. fix (go s. p.step s vf B n (\a s. c a (go s))) (p.value)
