def (<=) a b = intLeq a b
def (-) a b = intSub a b
def (*) a b = intMul a b

def VTy = Ty Val

def fold {A : VTy} (n : Int) (z : A) (s : Int -> A -> A) : A =
  fix {B = A -> A} (\rec n acc. if n <= 0 then acc else rec (n - 1) (s n acc)) n z

def fac n := fold n 1 (*)

def Nat1 = (A : Meta) -> A -> (A -> A) -> A
def Z1 : Nat1 = \A z s. z
def S1 (n : Nat1) : Nat1 = \A z s. s (n A z s)

def pow (k : Nat1) (n : Int) : Int =
  k Int 1 (\m. n * m)

def test n := pow (S1 (S1 (S1 Z1))) n
