def VTy l = Ty (Val l)

def recurse {l} {A : VTy l} {cv} {B : Ty cv} (x : A) (f : (A -> B) -> A -> B) : B =
  let rec go x := f go x; go x

enum Void :=
enum Unit := U
enum Bool := False | True

def (!) (b : Bool) := if b then False else True
def (&&) (a b : Bool) := if a then b else False
def (||) (a b : Bool) := if a then True else b

data Option {l} (A : VTy l) := None | Some A

data List {l} (A : VTy l) := Nil | (::) (head : A) (tail : List A)

def head {lev} {A : VTy lev} (l : List A) : Option A =
  match l
  | Nil => None
  | hd :: _ => Some hd

def tail {lev} {A : VTy lev} (l : List A) : Option (List A) =
  match l
  | Nil => None
  | _ :: tl => Some tl

def foldr {lev} {A : VTy lev} {cv} {B : Ty cv} (n : B) (f : A -> B -> B) (l : List A) : B =
  recurse l \go => match
  | Nil => n
  | hd :: tl => f hd (go tl)

def foldl {l1 l2} {A : VTy l1} {B : VTy l2} (n : B) (f : B -> A -> B) (l : List A) : B =
  foldr (\acc => acc) (\hd go acc => go (f acc hd)) l n

def Str = Class "java.lang.String"

def neg (a : Int) : Int = unsafeJVM Int "op:116" a
def (+) (a b : Int) : Int = unsafeJVM Int "op:96" a b
def (-) (a b : Int) : Int = unsafeJVM Int "op:100" a b
def (*) (a b : Int) : Int = unsafeJVM Int "op:104" a b
def (/) (a b : Int) : Int = unsafeJVM Int "op:108" a b

def (==) (a b : Int) : Bool = unsafeJVM Bool "branch:153" a b
def (!=) (a b : Int) : Bool = unsafeJVM Bool "branch:154" a b
def (<) (a b : Int) : Bool = unsafeJVM Bool "branch:155" a b
def (>=) (a b : Int) : Bool = unsafeJVM Bool "branch:156" a b
def (>) (a b : Int) : Bool = unsafeJVM Bool "branch:157" a b
def (<=) (a b : Int) : Bool = unsafeJVM Bool "branch:158" a b

def sum := foldl 0 (+)

def fac (n : Int) : Int :=
  let rec go n acc := if n <= 1 then acc else go (n - 1) (acc * n);
  go n 1

def list := 1 :: 2 :: 3 :: Nil

def main (args : Array Str) := sum list
