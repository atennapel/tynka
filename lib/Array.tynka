import "lib/Base"
import "lib/IO"
import "lib/Jvm"

def Array/new {A : VTy} (length : Int) (initial : A) : IO (Array A) =
  foreignIO (Array A) "arrayNew" length initial

def Array/unsafeNew {A : VTy} (length : Int) : IO (Array A) =
  foreignIO (Array A) "arrayUnsafeNew" length

def Array/length {A : VTy} (array : Array A) : IO Int =
  foreignIO Int "arrayLength" array

def Array/get {A : VTy} (index : Int) (array : Array A) : IO A =
  foreignIO A "arrayGet" index array

def Array/set {A : VTy} (index : Int) (value : A) (array : Array A) : IO Unit =
  foreignIO Unit "arraySet" index value array

def Array/updateIO {A : VTy} (i : Int) (f : A -> IO A) (a : Array A) : IO A =
  do {IO/bind}
    x <- Array/get i a;
    x' <- f x;
    Array/set i x' a;
    IO/return x

def Array/update {A : VTy} (i : Int) (f : A -> A) (a : Array A) : IO A =
  Array/updateIO i (\x. IO/return (f x)) a

def Array/foldrWithIndexIO {A B : VTy} (n : B) (c : Int -> A -> B -> IO B) (a : Array A) : IO B =
  do {IO/bind}
    l <- Array/length a;
    fix (go i. \acc.
      if Int/geq i 0 then do {IO/bind}
        x <- Array/get i a;
        acc' <- c i x acc;
        go (Int/sub i 1) acc'
      else
        IO/return acc
    ) (Int/sub l 1) n

def Array/foldrIO {A B : VTy} (n : B) (c : A -> B -> IO B) (a : Array A) : IO B =
  Array/foldrWithIndexIO n (\_. c) a

def Array/foldrWithIndex {A B : VTy} (n : B) (c : Int -> A -> B -> B) (a : Array A) : IO B =
  Array/foldrWithIndexIO n (\i hd acc. IO/return (c i hd acc)) a

def Array/foldr {A B : VTy} (n : B) (c : A -> B -> B) (a : Array A) : IO B =
  Array/foldrWithIndex n (\_. c) a

def Array/foldlWithIndexIO {A B : VTy} (n : B) (c : Int -> B -> A -> IO B) (a : Array A) : IO B =
  do {IO/bind}
    l <- Array/length a;
    fix (go i. \acc.
      if Int/lt i l then do {IO/bind}
        x <- Array/get i a;
        acc' <- (c i acc x);
        go (Int/add i 1) acc'
      else
        IO/return acc
    ) 0 n

def Array/foldlIO {A B : VTy} (n : B) (c : B -> A -> IO B) (a : Array A) : IO B =
  Array/foldlWithIndexIO n (\_. c) a

def Array/foldlWithIndex {A B : VTy} (n : B) (c : Int -> B -> A -> B) (a : Array A) : IO B =
  Array/foldlWithIndexIO n (\i acc hd. IO/return (c i acc hd)) a

def Array/foldl {A B : VTy} (n : B) (c : B -> A -> B) (a : Array A) : IO B =
  Array/foldlWithIndex n (\_. c) a

def Array/eachWithIndex {A : VTy} (a : Array A) (f : Int -> A -> IO Unit) : IO Unit =
  Array/foldlWithIndexIO U (\i _ hd. f i hd) a

def Array/each {A : VTy} (a : Array A) (f : A -> IO Unit) : IO Unit =
  Array/eachWithIndex a \_ hd. f hd

def Array/mutmapIO {A : VTy} (f : Int -> A -> IO A) (a : Array A) : IO Unit =
  Array/eachWithIndex a \i x. do {IO/bind}
    x' <- f i x;
    Array/set i x' a

def Array/mutmap {A : VTy} (f : Int -> A -> A) (a : Array A) : IO Unit =
  Array/mutmapIO (\i x. IO/return (f i x)) a

def Array/newInitIO {A : VTy} (length : Int) (f : Int -> IO A) : IO (Array A) =
  do {IO/bind}
    a <- Array/unsafeNew length;
    Array/mutmapIO (\i _. f i) a;
    IO/return a

def Array/newInit {A : VTy} (length : Int) (f : Int -> A) : IO (Array A) =
  Array/newInitIO length (\i. IO/return (f i))

def Array/mapIO {A B : VTy} (f : A -> IO B) (a : Array A) : IO (Array B) =
  do {IO/bind}
    l <- Array/length a;
    Array/newInitIO l (\i. do {IO/bind}
      x <- Array/get i a;
      f x)

def Array/map {A B : VTy} (f : A -> B) (a : Array A) : IO (Array B) =
  Array/mapIO (\x. IO/return (f x)) a

def Array/clone {A B : VTy} (a : Array A) : IO (Array A) =
  Array/map (\x. x) a
