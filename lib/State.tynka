import "lib/Base" (...)
import "lib/Jvm" (...)

def State (S A : VTy) = S -> Pair S A

def run {S A} (c : State S A) (s : S) : Pair S A = c s
def exec {S A} (c : State S A) (s : S) : A = (c s).2

def get {S} : State S S = \s. (s, s)
def put {S : VTy} (s : S) : State S Unit = \_. (s, [])
def update {S : VTy} (f : S -> S) : State S Unit = \s. (f s, [])

def return {S A : VTy} (a : A) : State S A = \s. (s, a)

def map {S A B : VTy} (f : A -> B) (c : State S A) : State S B =
  \s. match c s | MkPair s' res. (s', f res)

def bind {S A B : VTy} (c : State S A) (f : A -> State S B) : State S B =
  \s. casePair (c s) \s' res. f res s'

def seq {S A B : VTy} (c : State S A) (f : State S B) : State S B =
  \s. f (c s).1

def fixState {S A : VTy} (action : State S A -> State S A) : State S A =
  fix (go _. action (go U)) U

def updateN {S : VTy} (n : Int) (f : S -> S) : State S Unit =
  fix (rec n.
    if leqInt n 0 then return U
    else do {bind}
      update f;
      rec (subInt n 1)
  ) n
