opaque def VoidM = (P : Meta) -> P
def absurdM {A : Meta} (x : VoidM) : A = unfold VoidM; x A

def ifM {A} (b : BoolM) (t f : A) : A = elimBoolM (\_. A) t f b
def notM (b : BoolM) = ifM b FalseM TrueM

-- FixM
def FixM (F : Meta -> Meta) = IFixM {()} (\f _. F (f [])) []
def InM {F : Meta -> Meta} (x : F (FixM F)) : FixM F = IInM {()} {\f _. F (f [])} {[]} x
def elimFixM
  {F : Meta -> Meta}
  (P : FixM F -> Meta)
  (alg : (rec : (z : FixM F) -> P z) (y : F (FixM F)) -> P (InM {F} y))
  (x : FixM F) : P x
  = elimIFixM {()} {\f _. F (f [])} P (\rec y. alg rec y) x

-- EitherM
def EitherM (A B : Meta) = (tag : BoolM) ** ifM tag A B

def LeftM {A B} (x : A) : EitherM A B = (TrueM, x)
def RightM {A B} (x : B) : EitherM A B = (FalseM, x)

def elimEitherM {A B}
  (P : EitherM A B -> Meta)
  (left : (x : A) -> P (LeftM x))
  (right : (x : B) -> P (RightM x))
  (x : EitherM A B) : P x
  = elimBoolM (\tag. (x : ifM tag A B) -> P (tag, x)) left right x.tag x.2

def caseEitherM {A B R} (x : EitherM A B) (left : A -> R) (right : B -> R) : R =
  elimEitherM (\_. R) left right x

-- Id
def Id {A} x y = HId {A} {A} x y
def NHId {A B : Meta} (x : A) (y : B) = HId x y -> VoidM
def NId {A : Meta} (x y : A) = Id x y -> VoidM

def JId {A} (P : {a b : A} -> Id a b -> Meta) (refl : {a} -> P {a} Refl) {a b : A} (p : Id a b) : P p
  = elimHId (\{c} q. P {a} {c} q) refl p

def rewriteId {A} (P : A -> Meta) {a b : A} (p : Id a b) (x : P a) : P b
  = JId (\{a} {b} _. P a -> P b) (\q. q) p x

def castId {A B} (p : Id A B) (x : A) : B
  = rewriteId (\y. y) p x

def symId {A} {a b : A} (p : Id a b) : Id b a
  = JId (\{x} {y} _. Id {A} y x) Refl p

def transId {A} {a b c : A} (p : Id b c) (q : Id a b) : Id a c
  = rewriteId (Id a) p q

def apId {A B} {a b : A} (f : A -> B) (p : Id a b) : Id (f a) (f b)
  = rewriteId (\x. Id (f a) (f x)) p Refl

def idReflId {A} {a : A} (p : Id a a) : Id p Refl
  = elimHId (\{c} q. HId q (Refl {A} {c})) Refl p

def KId {A} {a : A} (P : Id a a -> Meta) (p : Id a a) (h : P Refl) : P p
  = rewriteId P (symId (idReflId p)) h

def uipId {A} {a b : A} (p1 p2 : Id a b) : Id p1 p2
  = (elimHId (\{c} p. (q : Id a c) -> Id q p) idReflId p2) p1

def rewriteBothId {A} (P : {x y : A} -> Id x y -> Meta) {a b : A} (p : Id a b) (x : P p) : P (symId p)
  = (elimHId {A} {a} (\e. P e -> P (symId e)) (\x. x) p) x

-- NatM
def NatMF R = EitherM R ()
def NatM = FixM NatMF
def ZM : NatM = InM {F = NatMF} (RightM [])
def SM (n : NatM) : NatM = InM {F = NatMF} (LeftM n)

def elimNatM
  (P : NatM -> Meta)
  (z : P ZM)
  (s : (m : NatM) -> P m -> P (SM m))
  (n : NatM) : P n
  = elimFixM {NatMF} P (\rec y. elimEitherM (\z. P (InM {NatMF} z)) (\m. s m (rec m)) (\_. z) y) n

def paraNatM {A} (n : NatM) (z : A) (s : NatM -> A -> A) : A = elimNatM (\_. A) z s n
def caseNatM {A} (n : NatM) (z : A) (s : NatM -> A) : A = elimNatM (\_. A) z (\m _. s m) n
def foldNatM {A} (n : NatM) (z : A) (s : A -> A) : A = elimNatM (\_. A) z (\_. s) n

def addNatM (a b : NatM) : NatM = foldNatM a b SM

def incNatM = SM
def decNatM (n : NatM) : NatM = caseNatM n ZM (\m. m)

def isZeroNatM (n : NatM) : BoolM = caseNatM n TrueM (\_. FalseM)

def eqNatM (a b : NatM) : BoolM =
  foldNatM a isZeroNatM (\r b. caseNatM b FalseM r) b
def neqNatM (a b : NatM) : BoolM = notM (eqNatM a b)

-- ListM
def ListMF A R = EitherM ((head : A) (tail : R) ** ()) ()
def ListM A = FixM (ListMF A)
def NilM {A} : ListM A = InM {ListMF A} (RightM [])
def ConsM {A} (head : A) (tail : ListM A) : ListM A = InM {ListMF A} (LeftM {B = ()} [head, tail])

def elimListM {A}
  (P : ListM A -> Meta)
  (nil : P NilM)
  (cons : (head : A) (tail : ListM A) -> P tail -> P (ConsM head tail))
  (x : ListM A) : P x
  = elimFixM {ListMF A} P (\rec y. elimEitherM (\s. P (InM {ListMF A} s))
      (\d. cons d.head d.tail (rec d.tail)) (\_. nil) y) x

def foldrListM {R A} (nil : R) (cons : A -> R -> R) (list : ListM A) : R
  = elimListM (\_. R) nil (\hd _ tl. cons hd tl) list

def mapListM {A B} (fn : A -> B) (list : ListM A) : ListM B
  = foldrListM NilM (\hd tl. ConsM (fn hd) tl) list

def appendListM {A} (a b : ListM A) : ListM A = foldrListM b ConsM a
