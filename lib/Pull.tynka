include "lib/List"
include "lib/Push"

def Step A S = (vf : VF) (R : Ty vf) -> R -> (A -> S -> R) -> R

def Pull A = (S : VTy) ** (step : S -> Step A S) ** (value : S) ** ()

def fromList {A : VTy} (as : List A) : Pull A =
  [List A, \as vf R stop yield. case as stop (\hd tl. yield hd tl), as]

def Pull-map {A B : VTy} (f : A -> B) (p : Pull A) : Pull B =
  [p.S, \as vf R stop yield. p.step as vf R stop (\a s. yield (f a) s), p.value]

def toPush {A : VTy} (p : Pull A) : Push A =
  \vf B c n. fix (go s. p.step s vf B n (\a s. c a (go s))) p.value
