include "lib/Primitives"

-- int
def Int = Foreign "I"

def intAdd (a b : Int) = foreign Int "op:96" a b
def intSub (a b : Int) = foreign Int "op:100" a b
def intMul (a b : Int) = foreign Int "op:104" a b
def intDiv (a b : Int) = foreign Int "op:108" a b
def intMod (a b : Int) = foreign Int "op:112" a b
def intNeg (a : Int) = foreign Int "op:116" a

def intEq (a b : Int) = foreign Bool "branch:153" a b
def intNeq (a b : Int) = foreign Bool "branch:154" a b
def intLt (a b : Int) = foreign Bool "branch:155" a b
def intGt (a b : Int) = foreign Bool "branch:157" a b
def intLeq (a b : Int) = foreign Bool "branch:158" a b
def intGeq (a b : Int) = foreign Bool "branch:156" a b

-- JVM specifics
def JavaVoid = Foreign "V"
def JavaArgs = Foreign "[Ljava/lang/String;"

def javaMain (action : JavaArgs -> IO Unit) : ^(JavaArgs -> JavaVoid) =
  \args. foreign JavaVoid "returnVoid" (action args)

def jvmEquals {A : VTy} (x y : Box A) : Bool =
  foreign Bool "invokeVirtual:java.lang.Object.equals" x y

-- String
def Str = Foreign "Ljava/lang/String;"

def strAppend (a b : Str) : Str =
  foreign Str "invokeVirtual:java.lang.String.concat" a b

-- IO
def putLn {A : VTy} (x : A) : IO Unit =
  let out = foreign (Foreign "Ljava/io/PrintStream;") "getStatic:java.lang.System.out";
  let u = foreign Unit "invokeVirtualVoid:java.io.PrintStream.println" out x;
  returnIO u

def getLn (_ : Unit) : IO Str =
  let in = foreign (Foreign "Ljava/io/InputStream;") "getStatic:java.lang.System.in";
  let scanner = foreign (Foreign "Ljava/util/Scanner;") "instantiate" in;
  let input = foreign Str "invokeVirtual:java.util.Scanner.nextLine" scanner;
  returnIO input
