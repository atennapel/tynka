import "lib/Primitives" (...)

-- int
def Int = Foreign "I"

def binopInt op (a b : Int) = foreign Int (appendLabel "op:" op) a b
def intAdd = binopInt "96"
def intSub = binopInt "100"
def intMul = binopInt "104"
def intDiv = binopInt "108"
def intMod = binopInt "112"
def intNeg = binopInt "116"

def branchInt op (a b : Int) = foreign Bool (appendLabel "branch:" op) a b
def intEq = branchInt "153"
def intNeq = branchInt "154"
def intLt = branchInt "155"
def intGeq = branchInt "156"
def intGt = branchInt "157"
def intLeq = branchInt "158"

-- JVM specifics
def JavaVoid = Foreign "V"
def JavaArgs = Foreign "[Ljava/lang/String;"

def javaMain (action : JavaArgs -> IO Unit) : ^(JavaArgs -> JavaVoid) =
  \args. foreign JavaVoid "returnVoid" (unsafeRunIO (action args))

def jvmEquals {A : VTy} (x y : Box A) : Bool =
  foreign Bool "invokeVirtual:java.lang.Object.equals" x y

-- String
def Str = Foreign "Ljava/lang/String;"

def strAppend (a b : Str) : Str =
  foreign Str "invokeVirtual:java.lang.String.concat" a b

-- IO
def putLn {A : VTy} (x : A) : IO Unit =
  let out = foreign (Foreign "Ljava/io/PrintStream;") "getStatic:java.lang.System.out";
  let u = foreign Unit "invokeVirtualVoid:java.io.PrintStream.println" out x;
  returnIO u

def getLn : IO Str =
  let in = foreign (Foreign "Ljava/io/InputStream;") "getStatic:java.lang.System.in";
  let scanner = foreign (Foreign "Ljava/util/Scanner;") "instantiate" in;
  let input = foreign Str "invokeVirtual:java.util.Scanner.nextLine" scanner;
  returnIO input

def parseInt (s : Str) : IO Int =
  let n = foreign Int "invokeStatic:java.lang.Integer.parseInt" s;
  returnIO n
