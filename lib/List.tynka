import "lib/Base" (...)
import "lib/IO" (return, (>>=) = bind, (>>>) = seq)
import "lib/Functor" as Functor
import "lib/Show" (...)
import "lib/JVM" (appendStr)

data List A
  | Nil
  | (::) A List

def isEmpty {A : VTy} (l : List A) : Bool =
  match l
  | Nil. True
  | _. False

def head {A : VTy} (l : List A) : Option A =
  match l
  | Nil. None
  | (::) hd _. Some hd

def foldr {A : VTy} {cv : CV} {B : Ty cv} (n : B) (c : A -> B -> B) (l : List A) : B =
  fix (go l. match l
  | Nil. n
  | (::) hd tl. c hd (go tl)
  ) l

def foldl {A B : VTy} (n : B) (c : B -> A -> B) (l : List A) : B =
  foldr (\acc. acc) (\hd go acc. go (c acc hd)) l n

def map {A B : VTy} (f : A -> B) (l : List A) : List B =
  foldr Nil (\hd tl. f hd :: tl) l

auto def FunctorList : Functor/Functor List = Functor/MkFunctor map

def append {A : VTy} (a b : List A) : List A = foldr b (::) a

def reverse {A : VTy} (l : List A) : List A =
  fix (go l. \acc. match l
  | Nil. acc
  | (::) hd tl. go tl (hd :: acc)
  ) l Nil

def traverseIO {A B : VTy} (f : A -> IO B) (l : List A) : IO (List B) =
  foldr (return Nil) (\hd tl. do fhd <- f hd; ftl <- tl; return (fhd :: ftl)) l

def traverseIO_ {A B : VTy} (f : A -> IO B) (l : List A) : IO Unit =
  foldr (return U) (\hd tl. f hd >>> tl) l

def foldlIO {A B : VTy} (start : B) (f : B -> A -> IO B) (l : List A) : IO B =
  foldr (\acc. return acc) (\hd tl acc. f acc hd >>= tl) l start

def Con:: {A : VTy} (hd : A) (tl : List A) : Con (List A) "::" =
  foreign (Con (List A) "::") "castCon:::" (hd :: tl)

-- not thread-safe
def fastmap {A B : VTy} (f : A -> B) (l : List A) : List B =
  match l
  | Nil. Nil
  | (::) hd tl.
    unsafePerformIO do
      let start := Con:: (f hd) Nil;
      foldlIO start (\pointer hd. do
        let next := Con:: (f hd) Nil;
        foreignIO Unit "mutateConUnit::::1" pointer (exposeCon next);
        return next
      ) tl;
      return start

def ShowList {A} {auto _ : Show A} : Show (List A) =
  MkShow (foldr "Nil" (\hd tl. appendStr (appendStr (show hd) "::") tl)) 
