import "lib/Base" (...)
import "lib/JVM" (...)
import "lib/StrSlice" as StrSlice
import "lib/StrSlice" (StrSlice)
import "lib/List" as List
import "lib/List" (List, Nil, (::))

data ParseError
  | UnexpectedEof
  | UnexpectedChar Char

data ParseResult A := Error ParseError | Result StrSlice A

def Parser (A : VTy) = StrSlice -> ParseResult A

-- monad definitions
def parse {A : VTy} (p : Parser A) (input : Str) : ParseResult A =
  p (StrSlice/fromStr input)

def return {A : VTy} (a : A) : Parser A = \s. Result s a

def error {A : VTy} (e : ParseError) : Parser A = \_. Error e

def mapParseResult {A B : VTy} (f : A -> B) (p : ParseResult A) : ParseResult B =
  match p | Error e. Error e | Result s a. Result s (f a)

def map {A B : VTy} (f : A -> B) (p : Parser A) : Parser B =
  \s. mapParseResult f (p s)

def bind {A B : VTy} (p : Parser A) (f : A -> Parser B) : Parser B =
  \s. match p s | Error e. Error e | Result s a. f a s

def seq {A B : VTy} (p : Parser A) (k : Parser B) : Parser B =
  bind p \_. k

def map2 {A B C : VTy} (f : A -> B -> C) (p1 : Parser A) (p2 : Parser B) : Parser C =
  bind p1 \a. bind p2 \b. return (f a b)

def first {A : VTy} (p1 p2 : Parser A) : Parser A =
  \s. match p1 s
  | Error _. p2 s
  | Result s v. Result s v

-- parser essentials
def char : Parser Char =
  \s. StrSlice/case s (Error UnexpectedEof) \c s. Result s c

def satisfy (f : Char -> Bool) : Parser Char =
  bind char \v.
    if f v then
      return v
    else
      error (UnexpectedChar v)

def is (c : Char) : Parser Char = satisfy (eqChar c)

def many {A : VTy} (p : Parser A) : Parser (List A) =
  map List/reverse \s. fix (go s. \acc.
    match p s
    | Error e. Result s acc
    | Result s' hd. go s' (hd :: acc)
    ) s Nil

def digit : Parser Char =
  satisfy \c. geqChar c (charFromInt 48) && leqChar c (charFromInt 57)

def spaces : Parser Unit =
  map (\_. U) (many (is (charFromInt 32)))

def number : Parser (List Char) = many digit
