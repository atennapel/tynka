import "lib/Base" (...)

def FunctorM (F : Meta -> Meta) = {A B : Meta} -> (A -> B) -> F A -> F B

-- church-encoded free monad
def Free (F : Meta -> Meta) (A : VTy) = (cv : CV) (R : Ty cv) -> (A -> R) -> (F R -> R) -> R

def handle
  {F : Meta -> Meta} {A : VTy} {cv : CV} {R : Ty cv}
  (c : Free F A) (pure : A -> R) (impure : F R -> R) : R =
  c _ R pure impure

def return {F} {A : VTy} (x : A) : Free F A = \cv R pure impure. pure x

def bind {F A B} (x : Free F A) (k : A -> Free F B) : Free F B =
  \cv R pure impure. x _ R (\a. k a _ R pure impure) impure

def map {F} {A B : VTy} (f : A -> B) (x : Free F A) : Free F B =
  \cv R pure impure. x _ R (\a. pure (f a)) impure

def seq {F A B} (x : Free F A) (k : Free F B) : Free F B = bind {F} x \_. k

def lift {F : Meta -> Meta} {A : VTy} (fmap : FunctorM F) (x : F A) : Free F A =
  \cv R pure impure. impure (fmap pure x)

def rec {F} {A B : VTy}
  (action : Free F A)
  (decide : {cv} {R : Ty cv} -> A -> R -> (B -> R) -> R) : Free F B =
  \cv R pure impure. fix (go _. action cv R (\x. decide x (go U) pure) impure) U

def recEither {F} {A : VTy} (action : Free F (Either Unit A)) : Free F A =
  \cv R pure impure. fix (go _.
    action cv R
      (\e. match e | Left _. go U | Right x. pure x) impure) U

def recLoop {F} {A : VTy} (action : Either Unit A -> (A -> Either Unit A) -> Free F (Either Unit A)) : Free F A =
  recEither (action (Left U) Right)
