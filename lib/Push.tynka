import "lib/Base" (...)
import "lib/JVM" (...)
import "lib/IO" as IO
import "lib/IO" (IO)
import "lib/List" as List
import "lib/List" (List, Nil, (::))

def Push A = (cv : CV) (B : Ty cv) -> (A -> B -> B) -> B -> B

def cons {A : VTy} (hd : A) (tl : Push A) : Push A =
  \cv B c n. c hd (tl cv B c n)

def fromList {A : VTy} (as : List A) : Push A =
  \cv B f b. List/foldr b f as

def toList {A : VTy} (as : Push A) : List A = as _ _ (::) Nil

def map {A B : VTy} (f : A -> B) (as : Push A) : Push B =
  \cv R c n. as cv R (\a bs. c (f a) bs) n

def foldr {A : VTy} {cv} {B : Ty cv} (b : B) (f : A -> B -> B) (as : Push A) : B =
  as cv B f b

def foldl {A B : VTy} (b : B) (f : B -> A -> B) (as : Push A) : B =
  as _ (B -> B) (\a rec acc. rec (f acc a)) (\acc. acc) b

def foldIO_ {A : VTy} (f : A -> IO Unit) (as : Push A) : IO Unit =
  foldr (IO/return U) (\hd tl. IO/seq (f hd) tl) as

def sum = foldl 0 addInt
def product = foldl 1 mulInt

def range (n : Int) : Push Int =
  \cv B f b. fix (go c. if leqInt c 0 then b else f c (go (subInt c 1))) n
