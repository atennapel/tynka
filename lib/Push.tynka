import "lib/Prelude" (...)
import "lib/List" (List, Nil, (::))

def Push A = (vf : VF) (B : Ty vf) -> (A -> B -> B) -> B -> B

def Cons {A : VTy} (hd : A) (tl : Push A) : Push A =
  \vf B c n. c hd (tl vf B c n)

def fromList {A : VTy} (as : List A) : Push A = \vf B f b. lib/List:foldr b f as

def range (start : Int) (endExclusive : Int) : Push Int =
  \vf B f b.
    if start > endExclusive then
      fix (go c. if c <= endExclusive then b else (f c (go (c - 1)))) start
    else
      fix (go c. if c >= endExclusive then b else (f c (go (c + 1)))) start

def toList {A : VTy} (as : Push A) : List A = as _ _ (::) Nil

def map {A B : VTy} (f : A -> B) (as : Push A) : Push B =
  \vf R c n. as vf R (\a bs. c (f a) bs) n

def foldr {A : VTy} {vf} {B : Ty vf} (b : B) (f : A -> B -> B) (as : Push A) : B =
  as vf B f b

def foldl {A B : VTy} (b : B) (f : B -> A -> B) (as : Push A) : B =
  as _ (B -> B) (\a rec acc. rec (f acc a)) (\acc. acc) b

def sum = foldl 0 (+)
def product = foldl 1 (*)

def foldIO_ {A : VTy} (f : A -> IO Unit) (as : Push A) : IO Unit =
  foldr (returnIO U) (\hd tl. f hd >>> tl) as
