import "lib/Base" (VTy)
import "lib/Functor" (...)
import "lib/Applicative" (...)

opaque def Monad (M : VTy -> VTy) =
  (applicative : Applicative M) **
  (bind : {A B : VTy} -> M A -> (A -> M B) -> M B) **
  ()
def MkMonad {M : VTy -> VTy}
  {auto applicative : Applicative M}
  (bind : {A B : VTy} -> M A -> (A -> M B) -> M B) : Monad M =
  unfold Monad; [applicative, bind]

def withApplicativeFromMonad {M : VTy -> VTy} {R}
  {auto monad : Monad M}
  (k : {auto applicative : Applicative M} -> R) : R =
  unfold Monad; k {monad.applicative}
def withFunctorFromMonad {M : VTy -> VTy} {R}
  {auto monad : Monad M}
  (k : {auto functor : Functor M} -> R) : R =
  unfold Monad; withFunctorFromApplicative k

def return {M : VTy -> VTy} {auto monad : Monad M} {A : VTy} (x : A) : M A =
  withApplicativeFromMonad (pure {M} x)

def (>>=) {M : VTy -> VTy} {auto monad : Monad M} {A B : VTy}
  (x : M A) (k : A -> M B) : M B =
  unfold Monad; monad.bind x k
