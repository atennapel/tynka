import "lib/Base" (...)
import "lib/JVM" (...)
import "lib/StrSlice" as StrSlice
import "lib/StrSlice" (StrSlice)
import "lib/List" as List
import "lib/List" (List, Nil, (::))

data ParseError
  | UnexpectedEof
  | UnexpectedChar Char

data ParseResult A := Error ParseError | Result StrSlice A
def SParseResult A = (cv : CV) (R : Ty cv) -> (ParseError -> R) -> (StrSlice -> A -> R) -> R

def Parser (A : VTy) : Meta = StrSlice -> SParseResult A

-- monad definitions
def parse {A : VTy} (p : Parser A) (input : Str) : ParseResult A =
  p (StrSlice/fromStr input) _ _ Error Result

def return {A : VTy} (a : A) : Parser A = \s. \cv R err res. res s a

def error {A : VTy} (e : ParseError) : Parser A = \_. \cv R err res. err e

def mapSParseResult {A B : VTy} (f : A -> B) (p : SParseResult A) : SParseResult B =
  \cv R err res. p cv R err (\s v. res s (f v))

def map {A B : VTy} (f : A -> B) (p : Parser A) : Parser B =
  \s. mapSParseResult f (p s)

def bind {A B : VTy} (p : Parser A) (f : A -> Parser B) : Parser B =
  \s. \cv R err res. p s cv R err (\s' a. f a s' cv R err res)

def seq {A B : VTy} (p : Parser A) (k : Parser B) : Parser B =
  bind p \_. k

def map2 {A B C : VTy} (f : A -> B -> C) (p1 : Parser A) (p2 : Parser B) : Parser C =
  bind p1 \a. bind p2 \b. return (f a b)

def first {A : VTy} (p1 p2 : Parser A) : Parser A =
  \s. \cv R err res. let res' s v := res s v; p1 s cv R (\_. p2 s cv R err res') res'

-- parser essentials
def char : Parser Char =
  \s. \cv R err res. StrSlice/unsafeCaseMut s (err UnexpectedEof) (\c s. res s c)

def satisfy (f : Char -> Bool) : Parser Char =
  \s. \cv R err res. let err' e := err e; char s cv R err' (\s' v. if f v then res s' v else err' (UnexpectedChar v))

def is (c : Char) : Parser Char = satisfy (eqChar c)

def many {A : VTy} (p : Parser A) : Parser (List A) =
  \s. \cv R err res.
    fix (go s. \acc.
      p s cv R
        (\_. res s (List/reverse acc))
        (\s' hd. go s' (hd :: acc))
    ) s Nil

def digit : Parser Char =
  satisfy \c. geqChar c (charFromInt 48) && leqChar c (charFromInt 57)

def spaces : Parser Unit =
  map (\_. U) (many (is (charFromInt 32)))

def number : Parser (List Char) = many digit
