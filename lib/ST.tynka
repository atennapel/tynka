import "lib/Base"
import "lib/IO"
import "lib/Array"

def ST S A = Tagged S (IO A)

def ST/return {S} {A : VTy} (x : A) : ST S A = tag (IO/return x)
def ST/bind {S} {A B : VTy} (a : ST S A) (k : A -> ST S B) : ST S B =
  tag (IO/bind (untag a) \x. untag (k x))

def ST/seq {S} {A B : VTy} (a : ST S A) (b : ST S B) : ST S B =
  ST/bind a \_. b

def ST/map {S} {A B : VTy} (f : A -> B) (a : ST S A) : ST S B =
  ST/bind a \x. ST/return (f x)

def ST/fix {S} {A : VTy} (action : ST S A -> ST S A) : ST S A =
  fix (go _. action (go U)) U

def ST/run {A : VTy} (action : {S} -> ST S A) : A =
  IO/unsafePerformIO (untag (action {"STToken"}))

-- arrays
def STArray S A = Tagged S (Array A)

def STArray/new {S} {A : VTy} (length : Int) (initial : A) : ST S (STArray S A) =
  tag (IO/map tag (Array/new length initial))

def STArray/length {S} {A : VTy} (array : STArray S A) : ST S Int =
  tag (Array/length (untag array))

def STArray/get {S} {A : VTy} (index : Int) (array : STArray S A) : ST S A =
  tag (Array/get index (untag array))

def STArray/set {S} {A : VTy} (index : Int) (value : A) (array : STArray S A) : ST S Unit =
  tag (Array/set index value (untag array))

-- refs
def STRef S A = STArray S A
def STRef/new {S} {A : VTy} (x : A) : ST S (STRef S A) = STArray/new 1 x
def STRef/get {S} {A : VTy} (ref : STRef S A) : ST S A = STArray/get 0 ref
def STRef/set {S} {A : VTy} (x : A) (ref : STRef S A) : ST S Unit = STArray/set 0 x ref
