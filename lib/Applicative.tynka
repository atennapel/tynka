import "lib/Base" (VTy)
import "lib/Functor" (...)

opaque def Applicative (F : VTy -> VTy) =
  (functor : Functor F) **
  (pure : {A : VTy} -> A -> F A) **
  (map2 : {A B C : VTy} -> (A -> B -> C) -> F A -> F B -> F C) **
  ()
def MkApplicative {F : VTy -> VTy}
  {auto functor : Functor F}
  (pure : {A : VTy} -> A -> F A)
  (map2 : {A B C : VTy} -> (A -> B -> C) -> F A -> F B -> F C) : Applicative F =
  unfold Applicative; [functor, pure, map2]

def withFunctorFromApplicative {F : VTy -> VTy} {R}
  {auto appl : Applicative F}
  (k : {auto functor : Functor F} -> R) : R =
  unfold Applicative; k {appl.functor}

def pure {F : VTy -> VTy} {auto appl : Applicative F} {A : VTy} (x : A) : F A =
  unfold Applicative; appl.pure x

def map2 {F : VTy -> VTy} {auto appl : Applicative F} {A B C : VTy}
  (f : A -> B -> C) (x : F A) (y : F B) : F C =
  unfold Applicative; appl.map2 f x y
