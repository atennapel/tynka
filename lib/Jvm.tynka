import "lib/Base"

-- int
def Int = Foreign "I"

def Int/jvmBinop op (a b : Int) = foreign Int (appendLabel "op:" op) a b
def Int/add = Int/jvmBinop "96"
def Int/sub = Int/jvmBinop "100"
def Int/mul = Int/jvmBinop "104"
def Int/div = Int/jvmBinop "108"
def Int/mod = Int/jvmBinop "112"
def Int/neg = Int/jvmBinop "116"

def Int/jvmBranch op (a b : Int) = foreign Bool (appendLabel "branch:" op) a b
def Int/eq = Int/jvmBranch "153"
def Int/neq = Int/jvmBranch "154"
def Int/lt = Int/jvmBranch "155"
def Int/geq = Int/jvmBranch "156"
def Int/gt = Int/jvmBranch "157"
def Int/leq = Int/jvmBranch "158"

-- JVM specifics
def JavaVoid = Foreign "V"
def JavaArgs = Foreign "[Ljava/lang/String;"
def JavaObject = Foreign "Ljava/lang/Object;"

-- String
def Str = Foreign "Ljava/lang/String;"

def Str/toJavaObject (x : Str) : JavaObject =
  foreign JavaObject "cast" x

def Str/append (a b : Str) : Str =
  foreign Str "invokeVirtual:java.lang.String.concat" a b

def Str/equals (x y : Str) : Bool =
  foreign Bool "invokeVirtual:java.lang.Object.equals" x (Str/toJavaObject y)

def Str/length (x : Str) : Int =
  foreign Int "invokeVirtual:java.lang.String.length" x

-- exceptions
def catch {A : VTy} (exc : Label) (try : A) (default : A) : A =
  foreign A (appendLabel "catch:" exc) try default

def parseInt (s : Str) : Option Int :=
  catch "java/lang/NumberFormatException" (
    let n = foreign Int "invokeStatic:java.lang.Integer.parseInt" s;
    Some n
  ) None

-- IO
def putLn {A : VTy} (x : A) : IO Unit =
  let out = foreign (Foreign "Ljava/io/PrintStream;") "getStatic:java.lang.System.out";
  foreignIO Unit "invokeVirtualVoid:java.io.PrintStream.println" out x

def getLn : IO Str =
  let in = foreign (Foreign "Ljava/io/InputStream;") "getStatic:java.lang.System.in";
  let scanner = foreign (Foreign "Ljava/util/Scanner;") "instantiate" in;
  foreignIO Str "invokeVirtual:java.util.Scanner.nextLine" scanner
