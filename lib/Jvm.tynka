import "lib/Base" (...)

-- int
def Int = Foreign "I"

def jvmBinopInt op (a b : Int) = foreign Int (appendLabel "op:" op) a b
def addInt = jvmBinopInt "96"
def subInt = jvmBinopInt "100"
def mulInt = jvmBinopInt "104"
def divInt = jvmBinopInt "108"
def modInt = jvmBinopInt "112"
def negInt (a : Int) = foreign Int "op:116" a
def incInt = addInt 1
def decInt n = subInt n 1

def jvmBranchInt op (a b : Int) = foreign Bool (appendLabel "branch:" op) a b
def eqInt = jvmBranchInt "153"
def neqInt = jvmBranchInt "154"
def ltInt = jvmBranchInt "155"
def geqInt = jvmBranchInt "156"
def gtInt = jvmBranchInt "157"
def leqInt = jvmBranchInt "158"

-- long
def Long = Foreign "J"

def longFromInt (n : Int) : Long = foreign Long "op:133" n

def jvmBinopLong op (a b : Long) = foreign Long (appendLabel "op:" op) a b
def addLong = jvmBinopLong "97"
def subLong = jvmBinopLong "101"
def mulLong = jvmBinopLong "105"
def divLong = jvmBinopLong "109"
def modLong = jvmBinopLong "113"
def negLong = jvmBinopLong "117"
def incLong = addLong (longFromInt 1)
def decLong n = subLong n (longFromInt 1)

def cmpLong (a b : Long) : Int = foreign Int "op:148" a b
def eqLong a b = eqInt 0 (cmpLong a b)
def neqLong a b = neqInt 0 (cmpLong a b)
def ltLong a b = eqInt (negInt 1) (cmpLong a b)
def geqLong a b = geqInt (cmpLong a b) 0
def gtLong a b = eqInt 1 (cmpLong a b)
def leqLong a b = leqInt (cmpLong a b) 0

-- Char
def Char = Foreign "C"

def charFromInt (c : Int) : Char =
  foreign Char "cast" c

def jvmBinopChar op (a b : Char) = foreign Char (appendLabel "op:" op) a b
def addChar = jvmBinopChar "96"
def subChar = jvmBinopChar "100"
def mulChar = jvmBinopChar "104"
def divChar = jvmBinopChar "108"
def modChar = jvmBinopChar "112"
def negChar = jvmBinopChar "116"
def incChar = addChar (charFromInt 1)
def decChar n = subChar n (charFromInt 1)

def jvmBranchChar op (a b : Char) = foreign Bool (appendLabel "branch:" op) a b
def eqChar = jvmBranchChar "153"
def neqChar = jvmBranchChar "154"
def ltChar = jvmBranchChar "155"
def geqChar = jvmBranchChar "156"
def gtChar = jvmBranchChar "157"
def leqChar = jvmBranchChar "158"

-- JVM specifics
def JavaVoid = Foreign "V"
def JavaObject = Foreign "Ljava/lang/Object;"

-- exceptions
def catch {A : VTy} (exc : Label) (try : A) (default : A) : A =
  foreign A (appendLabel "catch:" exc) try default

-- String
def Str = Foreign "Ljava/lang/String;"

def strToJavaObject (x : Str) : JavaObject =
  foreign JavaObject "cast" x

def appendStr (a b : Str) : Str =
  foreign Str "invokeVirtual:java.lang.String.concat" a b

def equalsStr (x y : Str) : Bool =
  foreign Bool "invokeVirtual:java.lang.Object.equals" x (strToJavaObject y)

def unsafeToString {A : VTy} (x : A) : Str =
  foreign Str "invokeVirtual:java.lang.Object.toString" x

def unsafePrimitiveToString {A : VTy} (x : A) : Str =
  foreign Str "invokeStatic:java.lang.String.valueOf" x

def intToString (x : Int) : Str = unsafePrimitiveToString x
def charToString (x : Char) : Str = unsafePrimitiveToString x
def longToString (x : Long) : Str = unsafePrimitiveToString x

def lengthStr (x : Str) : Int =
  foreign Int "invokeVirtual:java.lang.String.length" x

def isEmptyStr (x : Str) : Bool =
  eqInt (lengthStr x) 0

def unsafeIndexStr (i : Int) (x : Str) : Char =
  foreign Char "invokeVirtual:java.lang.String.charAt" x i

def unsafeSubstringFromStr (begin : Int) (x : Str) : Str =
  foreign Str "invokeVirtual:java.lang.String.substring" x begin

def unsafeSubstringStr (begin end : Int) (x : Str) : Str =
  foreign Str "invokeVirtual:java.lang.String.substring" x begin end

def caseStr {cv : CV} {A : Ty cv} (x : Str) (ifEmpty : A) (ifNonEmpty : Char -> Str -> A) : A =
  if isEmptyStr x then
    ifEmpty
  else
    ifNonEmpty (unsafeIndexStr 0 x) (unsafeSubstringFromStr 1 x)

def JavaMain = Array Str -> IO Unit

-- etc
def parseInt (s : Str) : Option Int :=
  catch "java/lang/NumberFormatException" (
    let n = foreign Int "invokeStatic:java.lang.Integer.parseInt" s;
    Some n
  ) None

-- IO
def putLn {A : VTy} (x : A) : IO Unit =
  let out = foreign (Foreign "Ljava/io/PrintStream;") "getStatic:java.lang.System.out";
  foreignIO Unit "invokeVirtualVoid:java.io.PrintStream.println" out x

def getLn : IO Str =
  let in = foreign (Foreign "Ljava/io/InputStream;") "getStatic:java.lang.System.in";
  let scanner = foreign (Foreign "Ljava/util/Scanner;") "instantiate" in;
  foreignIO Str "invokeVirtual:java.util.Scanner.nextLine" scanner
