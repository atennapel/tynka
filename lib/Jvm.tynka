import "lib/Base"

-- int
def Int = Foreign "I"

def Int/jvmBinop op (a b : Int) = foreign Int (appendLabel "op:" op) a b
def Int/add = Int/jvmBinop "96"
def Int/sub = Int/jvmBinop "100"
def Int/mul = Int/jvmBinop "104"
def Int/div = Int/jvmBinop "108"
def Int/mod = Int/jvmBinop "112"
def Int/neg = Int/jvmBinop "116"
def Int/inc = Int/add 1
def Int/dec n = Int/sub n 1

def Int/jvmBranch op (a b : Int) = foreign Bool (appendLabel "branch:" op) a b
def Int/eq = Int/jvmBranch "153"
def Int/neq = Int/jvmBranch "154"
def Int/lt = Int/jvmBranch "155"
def Int/geq = Int/jvmBranch "156"
def Int/gt = Int/jvmBranch "157"
def Int/leq = Int/jvmBranch "158"

-- long
def Long = Foreign "J"

def Long/fromInt (n : Int) : Long = foreign Long "op:133" n

def Long/jvmBinop op (a b : Long) = foreign Long (appendLabel "op:" op) a b
def Long/add = Long/jvmBinop "97"
def Long/sub = Long/jvmBinop "101"
def Long/mul = Long/jvmBinop "105"
def Long/div = Long/jvmBinop "109"
def Long/mod = Long/jvmBinop "113"
def Long/neg = Long/jvmBinop "117"
def Long/inc = Long/add (Long/fromInt 1)
def Long/dec n = Long/sub n (Long/fromInt 1)

-- Char
def Char = Foreign "C"

def Char/fromInt (c : Int) : Char =
  foreign Char "cast" c

def Char/jvmBinop op (a b : Char) = foreign Char (appendLabel "op:" op) a b
def Char/add = Char/jvmBinop "96"
def Char/sub = Char/jvmBinop "100"
def Char/mul = Char/jvmBinop "104"
def Char/div = Char/jvmBinop "108"
def Char/mod = Char/jvmBinop "112"
def Char/neg = Char/jvmBinop "116"
def Char/inc = Char/add (Char/fromInt 1)
def Char/dec n = Char/sub n (Char/fromInt 1)

def Char/jvmBranch op (a b : Char) = foreign Bool (appendLabel "branch:" op) a b
def Char/eq = Char/jvmBranch "153"
def Char/neq = Char/jvmBranch "154"
def Char/lt = Char/jvmBranch "155"
def Char/geq = Char/jvmBranch "156"
def Char/gt = Char/jvmBranch "157"
def Char/leq = Char/jvmBranch "158"

-- JVM specifics
def JavaVoid = Foreign "V"
def JavaArgs = Foreign "[Ljava/lang/String;"
def JavaObject = Foreign "Ljava/lang/Object;"

-- exceptions
def catch {A : VTy} (exc : Label) (try : A) (default : A) : A =
  foreign A (appendLabel "catch:" exc) try default

-- String
def Str = Foreign "Ljava/lang/String;"

def Str/toJavaObject (x : Str) : JavaObject =
  foreign JavaObject "cast" x

def Str/append (a b : Str) : Str =
  foreign Str "invokeVirtual:java.lang.String.concat" a b

def Str/equals (x y : Str) : Bool =
  foreign Bool "invokeVirtual:java.lang.Object.equals" x (Str/toJavaObject y)

def Str/length (x : Str) : Int =
  foreign Int "invokeVirtual:java.lang.String.length" x

def Str/isEmpty (x : Str) : Bool =
  Int/eq (Str/length x) 0

def Str/unsafeIndex (i : Int) (x : Str) : Char =
  foreign Char "invokeVirtual:java.lang.String.charAt" x i

def Str/unsafeSubstringFrom (begin : Int) (x : Str) : Str =
  foreign Str "invokeVirtual:java.lang.String.substring" x begin

def Str/unsafeSubstring (begin end : Int) (x : Str) : Str =
  foreign Str "invokeVirtual:java.lang.String.substring" x begin end

def Str/case {cv : CV} {A : Ty cv} (x : Str) (ifEmpty : A) (ifNonEmpty : Char -> Str -> A) : A =
  if Str/isEmpty x then
    ifEmpty
  else
    ifNonEmpty (Str/unsafeIndex 0 x) (Str/unsafeSubstringFrom 1 x)

-- etc
def parseInt (s : Str) : Option Int :=
  catch "java/lang/NumberFormatException" (
    let n = foreign Int "invokeStatic:java.lang.Integer.parseInt" s;
    Some n
  ) None

-- IO
def putLn {A : VTy} (x : A) : IO Unit =
  let out = foreign (Foreign "Ljava/io/PrintStream;") "getStatic:java.lang.System.out";
  foreignIO Unit "invokeVirtualVoid:java.io.PrintStream.println" out x

def getLn : IO Str =
  let in = foreign (Foreign "Ljava/io/InputStream;") "getStatic:java.lang.System.in";
  let scanner = foreign (Foreign "Ljava/util/Scanner;") "instantiate" in;
  foreignIO Str "invokeVirtual:java.util.Scanner.nextLine" scanner
